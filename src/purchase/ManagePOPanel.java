/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package purchase;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.BufferedWriter;
import java.io.FileWriter;
/**
 *
 * @author User
 */
public class ManagePOPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePOPanel
     */
    private PurchaseManager purchaseManager;
    public ManagePOPanel(PurchaseManager purchaseManager) {
        this.purchaseManager = purchaseManager;
        initComponents();
        loadPurchaseOrders("","All");
    }

    private void loadPurchaseOrders(String keyword, String statusFilter) {
    DefaultTableModel model = (DefaultTableModel) tblPO.getModel();
    model.setRowCount(0); // Clear table

    try (BufferedReader br = new BufferedReader(new FileReader("purchaseorder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");

            String status = data[data.length - 1].trim();

            if (!statusFilter.equals("All") && !status.equalsIgnoreCase(statusFilter)) {
                continue;
            }
            boolean match = false;
            for (String field : data) {
                if (field.toLowerCase().contains(keyword.toLowerCase())) {
                    match = true;
                    break;
                }
            }

            if (match || keyword.isEmpty()) {
                model.addRow(data);
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error loading PO data: " + e.getMessage());
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPO = new javax.swing.JTable();
        btnEditPO = new javax.swing.JButton();
        btnDeletePO = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbStatusFilter = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setForeground(new java.awt.Color(0, 77, 64));
        setPreferredSize(new java.awt.Dimension(995, 481));

        tblPO.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblPO.setForeground(new java.awt.Color(51, 51, 51));
        tblPO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO ID", "PR ID", "Item Code", "Item Name", "Quantity", "Supplier ID", "Date", "Requested By", "Status"
            }
        ));
        tblPO.setRowHeight(25);
        jScrollPane1.setViewportView(tblPO);

        btnEditPO.setBackground(new java.awt.Color(102, 204, 255));
        btnEditPO.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEditPO.setText("EDIT");
        btnEditPO.setActionCommand("Edit");
        btnEditPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPOActionPerformed(evt);
            }
        });

        btnDeletePO.setBackground(new java.awt.Color(255, 51, 0));
        btnDeletePO.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeletePO.setText("DELETE");
        btnDeletePO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePOActionPerformed(evt);
            }
        });

        jLabel1.setBackground(java.awt.SystemColor.controlHighlight);
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(33, 37, 41));
        jLabel1.setText("Purchase Order Deletion or Alteration Page");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setText("Select a Purchase Order and choose to Edit or Delete by pressing the buttons shown:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbStatusFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Pending", "Approved", "Rejected", " " }));
        cmbStatusFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusFilterActionPerformed(evt);
            }
        });

        jLabel3.setText("Filter Status");

        btnRefresh.setText("Refresh Search");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRefresh)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnSearch)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbStatusFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(btnEditPO, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeletePO, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbStatusFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh)
                .addGap(13, 13, 13)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditPO)
                    .addComponent(btnDeletePO))
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPOActionPerformed
        int selectedRow = tblPO.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        return;
    }

    String poID = tblPO.getValueAt(selectedRow, 0).toString();
    String newQuantity = JOptionPane.showInputDialog("Enter new quantity:");
    String newSupplier = JOptionPane.showInputDialog("Enter new supplier ID:");

    if (newQuantity == null || newSupplier == null) return;

    updatePO(poID, newQuantity, newSupplier);
    loadPurchaseOrders("","All"); 
    }//GEN-LAST:event_btnEditPOActionPerformed

    private void btnDeletePOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePOActionPerformed
        int row = tblPO.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Select a row to delete.");
        return;
    }

    String poID = tblPO.getValueAt(row, 0).toString();
    int confirm = JOptionPane.showConfirmDialog(this, "Delete PO " + poID + "?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;

    deletePO(poID);
    loadPurchaseOrders("","All");
    }//GEN-LAST:event_btnDeletePOActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyword = txtSearch.getText().trim();
        String statusFilter = cmbStatusFilter.getSelectedItem().toString();
        loadPurchaseOrders(keyword, statusFilter);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cmbStatusFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusFilterActionPerformed
        String keyword = txtSearch.getText().trim();
        String statusFilter = cmbStatusFilter.getSelectedItem().toString();
        loadPurchaseOrders(keyword, statusFilter);
    }//GEN-LAST:event_cmbStatusFilterActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
         txtSearch.setText("");  
        cmbStatusFilter.setSelectedItem("All");  
        loadPurchaseOrders("","All");  
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void deletePO(String poID) {
    StringBuilder updated = new StringBuilder();
    try (BufferedReader br = new BufferedReader(new FileReader("purchaseorder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            if (!line.startsWith(poID + ",")) {
                updated.append(line).append("\n");
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Read error.");
        return;
    }

    try (BufferedWriter bw = new BufferedWriter(new FileWriter("purchaseorder.txt"))) {
        bw.write(updated.toString());
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Write error.");
    }
}

    
    private void updatePO(String poID, String newQty, String newSupplier) {
    StringBuilder updated = new StringBuilder();
    try (BufferedReader br = new BufferedReader(new FileReader("purchaseorder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(",");
            if (parts[0].equals(poID)) {
                parts[4] = newQty;
                parts[5] = newSupplier;
            }
            updated.append(String.join(",", parts)).append("\n");
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Read error.");
        return;
    }

    try (BufferedWriter bw = new BufferedWriter(new FileWriter("purchaseorder.txt"))) {
        bw.write(updated.toString());
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Write error.");
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePO;
    private javax.swing.JButton btnEditPO;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbStatusFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPO;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
