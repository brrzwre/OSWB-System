/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package inventory;

import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.PDPageContentStream;

import java.awt.Color;
import java.io.*;
import java.time.LocalDate;
import java.util.*;

public class StockReportGenerator {

    private static final float MARGIN = 50;
    private static final float Y_START = 750;
    private static final float ROW_HEIGHT = 20;
    private static final float PAGE_BOTTOM_MARGIN = 50;

    public void generateReport(String itemsFile, String salesFile, String supplierFile, String outputPdf) throws IOException {
        try (PDDocument document = new PDDocument()) {

            Map<String, Double> priceMap = loadSalesPrices(salesFile);
            Map<String, String[]> suppliers = loadSuppliers(supplierFile);
            List<String[]> items = loadItems(itemsFile);
            items.sort(Comparator.comparing(o -> o[0]));  

            PDPage page = new PDPage(PDRectangle.A4);
            document.addPage(page);
            PDPageContentStream contentStream = new PDPageContentStream(document, page);

            try {
                contentStream.setFont(PDType1Font.HELVETICA_BOLD, 18);
                contentStream.beginText();
                contentStream.newLineAtOffset(MARGIN, Y_START);
                contentStream.showText("Stock Report");
                contentStream.endText();

                contentStream.beginText();
                contentStream.setFont(PDType1Font.HELVETICA, 12);
                contentStream.newLineAtOffset(MARGIN, Y_START - 20);
                contentStream.showText("Items in low stock are labelled in red text.");
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Report Date: " + LocalDate.now());
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Generated By: Inventory Manager");
                contentStream.endText();

                float yPosition = Y_START - 70;
                drawTableHeader(contentStream, yPosition);
                yPosition -= ROW_HEIGHT;

                double totalValue = 0;

                for (String[] item : items) {
                    if (yPosition < PAGE_BOTTOM_MARGIN) {
                        contentStream.close();
                        page = new PDPage(PDRectangle.A4);
                        document.addPage(page);
                        contentStream = new PDPageContentStream(document, page);
                        yPosition = Y_START - 50;
                        drawTableHeader(contentStream, yPosition);
                        yPosition -= ROW_HEIGHT;
                    }

                    String itemCode = item[0];
                    String itemName = item[1];
                    String supplierId = item[2];
                    int qty = Integer.parseInt(item[3]);

                    double unitPrice = priceMap.getOrDefault(itemCode, 0.0);
                    double value = qty * unitPrice;
                    totalValue += value;

                    String supplierName = suppliers.containsKey(supplierId) ? suppliers.get(supplierId)[1] : "Unknown";

                    contentStream.setNonStrokingColor(qty < 200 ? Color.RED : Color.BLACK);

                    contentStream.beginText();
                    contentStream.setFont(PDType1Font.HELVETICA, 12);
                    contentStream.newLineAtOffset(MARGIN, yPosition);
                    String row = String.format("%-10s %-25s %-20s %5d %10.2f %12.2f",
                            itemCode, itemName, supplierName, qty, unitPrice, value);
                    contentStream.showText(row);
                    contentStream.endText();

                    yPosition -= ROW_HEIGHT;
                }

                if (yPosition < PAGE_BOTTOM_MARGIN) {
                    contentStream.close();
                    page = new PDPage(PDRectangle.A4);
                    document.addPage(page);
                    contentStream = new PDPageContentStream(document, page);
                    yPosition = Y_START - 50;
                }
                contentStream.setNonStrokingColor(Color.BLACK);
                contentStream.beginText();
                contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
                contentStream.newLineAtOffset(MARGIN, yPosition - 20);
                contentStream.showText("Total Inventory Value: RM " + String.format("%.2f", totalValue));
                contentStream.endText();

                contentStream.close();

                PDPage supplierPage = new PDPage(PDRectangle.A4);
                document.addPage(supplierPage);
                PDPageContentStream supplierContent = new PDPageContentStream(document, supplierPage);

                try {
                    float ySupplier = Y_START;

                    supplierContent.setFont(PDType1Font.HELVETICA_BOLD, 16);
                    supplierContent.beginText();
                    supplierContent.newLineAtOffset(MARGIN, ySupplier);
                    supplierContent.showText("Supplier Contact Information");
                    supplierContent.endText();

                    ySupplier -= ROW_HEIGHT * 2;

                    supplierContent.setFont(PDType1Font.HELVETICA_BOLD, 12);
                    supplierContent.beginText();
                    supplierContent.newLineAtOffset(MARGIN, ySupplier);
                    supplierContent.showText(String.format("%-10s %-20s %-30s %-15s", "Supplier ID", "Name", "Email", "Phone"));
                    supplierContent.endText();

                    ySupplier -= ROW_HEIGHT;

                    supplierContent.setFont(PDType1Font.HELVETICA, 12);

                    List<String[]> supplierList = new ArrayList<>(suppliers.values());
                    supplierList.sort(Comparator.comparing(s -> s[0]));

                    for (String[] sup : supplierList) {
                        if (ySupplier < PAGE_BOTTOM_MARGIN) {
                            supplierContent.close();
                            supplierPage = new PDPage(PDRectangle.A4);
                            document.addPage(supplierPage);
                            supplierContent = new PDPageContentStream(document, supplierPage);
                            ySupplier = Y_START - 50;
                        }
                        supplierContent.beginText();
                        supplierContent.newLineAtOffset(MARGIN, ySupplier);
                        supplierContent.showText(String.format("%-10s %-20s %-30s %-15s",
                                sup[0], sup[1], sup[2], sup[3]));
                        supplierContent.endText();
                        ySupplier -= ROW_HEIGHT;
                    }

                } finally {
                    supplierContent.close();
                }

                document.save(outputPdf);
            } finally {
                if (contentStream != null) {
                    contentStream.close();
                }
            }
        }
    }

    private void drawTableHeader(PDPageContentStream contentStream, float y) throws IOException {
        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
        contentStream.newLineAtOffset(MARGIN, y);
        contentStream.showText(String.format("%-10s %-25s %-20s %5s %10s %12s",
                "Item Code", "Item Name", "Supplier", "Qty", "Unit", "Value"));
        contentStream.endText();
    }

    private Map<String, Double> loadSalesPrices(String salesFile) throws IOException {
        Map<String, Double> priceMap = new HashMap<>();
        try (BufferedReader salesReader = new BufferedReader(new FileReader(salesFile))) {
            String line;
            while ((line = salesReader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 4) {
                    priceMap.put(parts[1], Double.parseDouble(parts[3]));
                }
            }
        }
        return priceMap;
    }

    private Map<String, String[]> loadSuppliers(String supplierFile) throws IOException {
        Map<String, String[]> suppliers = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(supplierFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 4) {
                    suppliers.put(parts[0], parts);
                }
            }
        }
        return suppliers;
    }

    private List<String[]> loadItems(String itemsFile) throws IOException {
        List<String[]> items = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(itemsFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 4) {
                    items.add(parts);
                }
            }
        }
        return items;
    }
}
